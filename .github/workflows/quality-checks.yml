name: Quality Checks

on:
  workflow_call:
    outputs:
      high_severity_vulnerabilities:
        description: "Number of high severity vulnerabilities found"
        value: ${{ jobs.security-scan.outputs.high_severity_vulnerabilities }}
      critical_severity_vulnerabilities:
        description: "Number of critical severity vulnerabilities found"
        value: ${{ jobs.security-scan.outputs.critical_severity_vulnerabilities }}

jobs:
  # Lint and Test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Jest tests
        id: jest
        run: npm test -- --testPathIgnorePatterns="/pages/"

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    outputs:
      high-severity-vulnerabilities: ${{ steps.npm-audit.outputs.high_severity_count }}
      critical-severity-vulnerabilities: ${{ steps.npm-audit.outputs.critical_severity_count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: npm-audit
        run: |
          set +e
          npm_audit_output=$(npm audit --json || true)
          set -e

          # Count high and critical severity vulnerabilities
          high_count=$(echo "$npm_audit_output" | grep -o '"severity":"high"' | wc -l || echo 0)
          critical_count=$(echo "$npm_audit_output" | grep -o '"severity":"critical"' | wc -l || echo 0)

          echo "Found $high_count high severity and $critical_count critical severity vulnerabilities"

          # Set outputs for use in quality gates
          echo "high_severity_count=$high_count" >> $GITHUB_OUTPUT
          echo "critical_severity_count=$critical_count" >> $GITHUB_OUTPUT

          # Fail the job if there are critical vulnerabilities
          if [ "$critical_count" -gt 0 ]; then
            echo "Critical vulnerabilities found. Failing the job."
            npm audit
            exit 1
          fi

          # Show the audit results
          npm audit

      - name: Run Snyk scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # CodeQL Analysis job
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for CodeQL Analysis
        run: |
          # Build the code for analysis
          npm run build
        continue-on-error: true

      # This step automatically uploads results to GitHub Security
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Check for critical issues in the CodeQL database directly
      - name: Check for critical vulnerabilities
        id: check-critical
        run: |
          set +e
          # Look for critical issues in the CodeQL database
          critical_count=$(grep -r "level\":\"error\"" $(find /home/runner/work/_temp -name "*.sarif" -type f) | wc -l || echo 0)
          set -e

          echo "Found $critical_count critical security issues"

          if [ "$critical_count" -gt 0 ]; then
            echo "Critical security issues found. Failing the job."
            exit 1
          fi
