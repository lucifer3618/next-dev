name: Next.js CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to production'
        type: boolean
        default: false
        required: true

# Add global permissions for GitHub token
permissions:
  contents: write
  pull-requests: write
  deployments: write
  issues: write
  statuses: write
  security-events: write

jobs:
  # Lint and Test job - runs for all events
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Jest tests
        id: jest
        run: npm test -- --testPathIgnorePatterns="/pages/" || echo "::warning::Some Jest tests failed but continuing workflow"

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    outputs:
      high-severity-vulnerabilities: ${{ steps.npm-audit.outputs.high_severity_count }}
      critical-severity-vulnerabilities: ${{ steps.npm-audit.outputs.critical_severity_count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: npm-audit
        run: |
          set +e
          npm_audit_output=$(npm audit --json || true)
          set -e

          # Count high and critical severity vulnerabilities
          high_count=$(echo "$npm_audit_output" | grep -o '"severity":"high"' | wc -l || echo 0)
          critical_count=$(echo "$npm_audit_output" | grep -o '"severity":"critical"' | wc -l || echo 0)

          echo "Found $high_count high severity and $critical_count critical severity vulnerabilities"

          # Set outputs for use in quality gates
          echo "high_severity_count=$high_count" >> $GITHUB_OUTPUT
          echo "critical_severity_count=$critical_count" >> $GITHUB_OUTPUT

          # Fail the job if there are critical vulnerabilities
          if [ "$critical_count" -gt 0 ]; then
            echo "Critical vulnerabilities found. Failing the job."
            npm audit
            exit 1
          fi

          # Show the audit results
          npm audit

      - name: Run Snyk scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # CodeQL Analysis job
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for CodeQL Analysis
        run: |
          # Build the code for analysis
          npm run build
        continue-on-error: true

      # This step automatically uploads results to GitHub Security
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Check for critical issues in the CodeQL database directly
      - name: Check for critical vulnerabilities
        id: check-critical
        run: |
          set +e
          # Look for critical issues in the CodeQL database
          critical_count=$(grep -r "level\":\"error\"" $(find /home/runner/work/_temp -name "*.sarif" -type f) | wc -l || echo 0)
          set -e

          echo "Found $critical_count critical security issues"

          if [ "$critical_count" -gt 0 ]; then
            echo "Critical security issues found. Failing the job."
            exit 1
          fi

  # Build job
  build:
    name: Build Application
    needs: [lint-and-test, security-scan, codeql-analysis]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        id: build-app
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}
          NEXT_PUBLIC_GOOGLE_AUTH_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_AUTH_KEY }}
        run: |
          set +e
          npm run build
          build_exit_code=$?
          set -e
          echo "Build exit code: $build_exit_code"
          if [ $build_exit_code -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            exit $build_exit_code
          fi

      - name: Create build artifact
        if: steps.build-app.outputs.success == 'true'
        run: |
          tar -czf build-output.tar.gz .next
          echo "Build artifact created successfully"

      - name: Upload build artifact
        if: steps.build-app.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-output.tar.gz
          retention-days: 7

      - name: Set build status
        id: build-status
        run: |
          if [ "${{ steps.build-app.outputs.success }}" == "true" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Security Scan Summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- High Severity: ${{ needs.security-scan.outputs.high-severity-vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
          echo "- Critical Severity: ${{ needs.security-scan.outputs.critical-severity-vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CodeQL Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Static Analysis completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- No critical security issues found" >> $GITHUB_STEP_SUMMARY

  # Performance testing job
  performance-test:
    name: Performance Testing
    needs: [build]
    if: needs.build.outputs.build-success == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Extract build artifact
        run: tar -xzf build-output.tar.gz

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x

      - name: Create Lighthouse config
        run: |
          cat > lighthouserc.json << 'EOL'
          {
            "ci": {
              "collect": {
                "url": ["http://localhost:3000"],
                "numberOfRuns": 1
              },
              "assert": {
                "preset": "lighthouse:no-pwa",
                "assertions": {
                  "csp-xss": "off",
                  "document-title": "off",
                  "errors-in-console": "off",
                  "font-size": "off",
                  "html-has-lang": "off",
                  "meta-description": "off",
                  "tap-targets": "off",
                  "viewport": "off",
                  "unused-javascript": "off",
                  "total-byte-weight": "off",
                  "bootup-time": "off",
                  "dom-size": "off",
                  "mainthread-work-breakdown": "off",
                  "max-potential-fid": "off",
                  "modern-image-formats": "off",
                  "render-blocking-resources": "off",
                  "server-response-time": "off",
                  "largest-contentful-paint": "off"
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Start Next.js server
        run: |
          npm ci
          npm run start &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        continue-on-error: true

      - name: Save Lighthouse report
        run: |
          mkdir -p lighthouse-reports
          cp -r .lighthouseci/reports/* lighthouse-reports/ || true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
          retention-days: 7

  # Deploy preview for development branch
  deploy-preview:
    name: Deploy Preview
    needs: [build, performance-test]
    if: |
      needs.build.outputs.build-success == 'true' &&
      github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.preview-deployment.outputs.preview-url }}

    permissions:
      contents: write
      deployments: write
      statuses: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Extract build artifact
        run: tar -xzf build-output.tar.gz

      - name: Deploy to Vercel (Preview)
        id: preview-deployment
        uses: amondnet/vercel-action@v25
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}
          NEXT_PUBLIC_GOOGLE_AUTH_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_AUTH_KEY }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GH_PAT }}
          github-comment: true
          working-directory: ./
          vercel-args: '--env NEXT_PUBLIC_GOOGLE_AUTH_KEY="${{ secrets.NEXT_PUBLIC_GOOGLE_AUTH_KEY }}" --env NEXT_PUBLIC_CONVEX_URL="${{ secrets.NEXT_PUBLIC_CONVEX_URL }}" --env NEXT_PUBLIC_GEMINI_API_KEY="${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}"'

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Health check
        id: health-check
        run: |
          DEPLOY_URL="${{ steps.preview-deployment.outputs.preview-url }}"
          echo "Checking health of $DEPLOY_URL"

          MAX_RETRIES=5
          RETRY_DELAY=10

          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Health check attempt $i of $MAX_RETRIES"
            if curl -s -f -o /dev/null "$DEPLOY_URL"; then
              echo "status=success" >> $GITHUB_OUTPUT
              break
            else
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Health check failed. Waiting for $RETRY_DELAY seconds before retry..."
                sleep $RETRY_DELAY
              else
                echo "Health check failed after $MAX_RETRIES attempts."
                echo "status=failure" >> $GITHUB_OUTPUT
              fi
            fi
          done

      - name: Create GitHub Deployment Status
        if: steps.health-check.outputs.status == 'success'
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GH_PAT }}
          state: "success"
          deployment-id: ${{ github.run_id }}
          environment-url: ${{ steps.preview-deployment.outputs.preview-url }}
          description: "Preview deployment successful"

      - name: Store deployment URL for rollback
        if: steps.health-check.outputs.status == 'success'
        run: |
          DEPLOY_URL="${{ steps.preview-deployment.outputs.preview-url }}"
          echo "$DEPLOY_URL" > .vercel-latest-deployment
          echo "Latest deployment URL: $DEPLOY_URL"

      - name: Upload deployment URL artifact
        if: steps.health-check.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-url
          path: .vercel-latest-deployment
          retention-days: 30
          if-no-files-found: warn

  # Synthetic monitoring for preview deployment
  synthetic-monitoring-preview:
    name: Synthetic Monitoring (Preview)
    needs: [deploy-preview]
    if: always() && needs.deploy-preview.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment URL artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-url
          path: ./deployment-info
        continue-on-error: true

      - name: Set deployment URL from artifact
        id: check-artifact
        run: |
          if [ -f "./deployment-info/.vercel-latest-deployment" ]; then
            DEPLOY_URL=$(cat ./deployment-info/.vercel-latest-deployment)
            echo "DEPLOYMENT_URL=$DEPLOY_URL" >> $GITHUB_ENV
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "Found deployment URL from artifact: $DEPLOY_URL"
            echo "source=artifact" >> $GITHUB_OUTPUT
          else
            echo "Deployment URL artifact not found. Will try job output instead."
            echo "source=none" >> $GITHUB_OUTPUT
          fi

      # Fallback to job output if artifact is not available
      - name: Set deployment URL from job output
        id: set-url-from-output
        if: steps.check-artifact.outputs.source == 'none'
        run: |
          DEPLOY_URL="${{ needs.deploy-preview.outputs.deployment-url }}"
          if [ -n "$DEPLOY_URL" ]; then
            echo "DEPLOYMENT_URL=$DEPLOY_URL" >> $GITHUB_ENV
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "Found deployment URL from job output: $DEPLOY_URL"
            echo "source=output" >> $GITHUB_OUTPUT
          else
            echo "::warning::No deployment URL found from artifact or job output. Cannot run synthetic monitoring."
            exit 1
          fi

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -o k6.tar.gz
          tar -xzf k6.tar.gz
          sudo cp k6-v0.47.0-linux-amd64/k6 /usr/local/bin

      - name: Run synthetic monitoring tests
        run: |
          echo "Running synthetic monitoring tests against $DEPLOYMENT_URL"
          k6 run -e BASE_URL=$DEPLOYMENT_URL --no-thresholds synthetic-monitoring/k6-monitoring/all-checks.js || echo "::warning::Some synthetic monitoring tests failed but continuing workflow"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: synthetic-monitoring-preview-results
          path: summary.json
          retention-days: 14

      - name: Notify on test failures
        if: failure()
        run: |
          echo "::warning::Synthetic monitoring tests failed for preview deployment at ${{ steps.check-artifact.outputs.url }}"

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    needs: [build, performance-test]
    if: |
      needs.build.outputs.build-success == 'true' &&
      ((github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'master')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'true'))
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.prod-deployment.outputs.preview-url }}

    permissions:
      contents: write
      deployments: write
      statuses: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Extract build artifact
        run: tar -xzf build-output.tar.gz

      - name: Deploy to Vercel (Production)
        id: prod-deployment
        uses: amondnet/vercel-action@v25
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}
          NEXT_PUBLIC_GOOGLE_AUTH_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_AUTH_KEY }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GH_PAT }}
          github-comment: true
          working-directory: ./
          vercel-args: '--prod --env NEXT_PUBLIC_GOOGLE_AUTH_KEY="${{ secrets.NEXT_PUBLIC_GOOGLE_AUTH_KEY }}" --env NEXT_PUBLIC_CONVEX_URL="${{ secrets.NEXT_PUBLIC_CONVEX_URL }}" --env NEXT_PUBLIC_GEMINI_API_KEY="${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}"'

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Health check
        id: health-check
        run: |
          DEPLOY_URL="${{ steps.prod-deployment.outputs.preview-url }}"
          echo "Checking health of $DEPLOY_URL"

          MAX_RETRIES=5
          RETRY_DELAY=10

          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Health check attempt $i of $MAX_RETRIES"
            if curl -s -f -o /dev/null "$DEPLOY_URL"; then
              echo "status=success" >> $GITHUB_OUTPUT
              break
            else
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Health check failed. Waiting for $RETRY_DELAY seconds before retry..."
                sleep $RETRY_DELAY
              else
                echo "Health check failed after $MAX_RETRIES attempts."
                echo "status=failure" >> $GITHUB_OUTPUT
              fi
            fi
          done

      - name: Create GitHub Deployment Status
        if: steps.health-check.outputs.status == 'success'
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GH_PAT }}
          state: "success"
          deployment-id: ${{ github.run_id }}
          environment-url: ${{ steps.prod-deployment.outputs.preview-url }}
          description: "Production deployment successful"

      - name: Store deployment URL for rollback
        if: steps.health-check.outputs.status == 'success'
        run: |
          DEPLOY_URL="${{ steps.prod-deployment.outputs.preview-url }}"
          echo "$DEPLOY_URL" > .vercel-latest-production-deployment
          echo "Latest production deployment URL: $DEPLOY_URL"

      - name: Upload deployment URL artifact
        if: steps.health-check.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-url
          path: .vercel-latest-production-deployment
          retention-days: 30
          if-no-files-found: warn

  # Synthetic monitoring for production deployment
  synthetic-monitoring-production:
    name: Synthetic Monitoring (Production)
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment URL artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: production-deployment-url
          path: ./deployment-info
        continue-on-error: true

      - name: Set deployment URL from artifact
        id: check-artifact
        run: |
          if [ -f "./deployment-info/.vercel-latest-production-deployment" ]; then
            DEPLOY_URL=$(cat ./deployment-info/.vercel-latest-production-deployment)
            echo "DEPLOYMENT_URL=$DEPLOY_URL" >> $GITHUB_ENV
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "Found production deployment URL from artifact: $DEPLOY_URL"
            echo "source=artifact" >> $GITHUB_OUTPUT
          else
            echo "Production deployment URL artifact not found. Will try job output instead."
            echo "source=none" >> $GITHUB_OUTPUT
          fi

      # Fallback to job output if artifact is not available
      - name: Set deployment URL from job output
        id: set-url-from-output
        if: steps.check-artifact.outputs.source == 'none'
        run: |
          DEPLOY_URL="${{ needs.deploy-production.outputs.deployment-url }}"
          if [ -n "$DEPLOY_URL" ]; then
            echo "DEPLOYMENT_URL=$DEPLOY_URL" >> $GITHUB_ENV
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "Found deployment URL from job output: $DEPLOY_URL"
            echo "source=output" >> $GITHUB_OUTPUT
          else
            echo "::warning::No production deployment URL found from artifact or job output. Cannot run synthetic monitoring."
            exit 1
          fi

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -o k6.tar.gz
          tar -xzf k6.tar.gz
          sudo cp k6-v0.47.0-linux-amd64/k6 /usr/local/bin

      - name: Run synthetic monitoring tests
        run: |
          echo "Running synthetic monitoring tests against $DEPLOYMENT_URL"
          k6 run -e BASE_URL=$DEPLOYMENT_URL --no-thresholds synthetic-monitoring/k6-monitoring/all-checks.js || echo "::warning::Some synthetic monitoring tests failed but continuing workflow"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: synthetic-monitoring-production-results
          path: summary.json
          retention-days: 14

      - name: Notify on test failures
        if: failure()
        run: |
          echo "::error::Synthetic monitoring tests failed for production deployment at ${{ steps.check-artifact.outputs.url }}"
          # In a real scenario, you might want to send notifications via email, Slack, etc.